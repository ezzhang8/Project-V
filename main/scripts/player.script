-- Externally modifiable properties; modifiable via set_player_property message
go.property("canMove", true)
go.property("HP", 50)
go.property("walkSpeed", 100)

local inventory = {}
	
function init(self)
	-- Initial message postings
	msg.post(".", "acquire_input_focus")
	
	-- Initial variable declarations
	self.currentAnimation = "left"
	self.facingDirection = vmath.vector3(0, 0, 0)
end

local function animate(self, newAnimation) 
	sprite.play_flipbook("#sprite", newAnimation)
end

local function findScene(sceneId) 
	for i, v in pairs(loadedScenes) do
		if v == sceneId then
			return true
		end
	end
	return false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		local proj = vmath.dot(self.correction, message.normal)
		local comp = (message.distance - proj) * message.normal
		self.correction = self.correction + comp
		go.set_position(go.get_position() + comp)
	elseif message_id == hash("set_player_property") then
		-- sets the player (this object) with a named variable and property
		go.set(self.url, message[1][1], message[1][2])
	end
end

function update(self, dt)
	go.set_position(go.get_position() + self.facingDirection * self.walkSpeed * dt)
	self.correction = vmath.vector3()
end

function on_input(self, action_id, action)
	if action.pressed and self.canMove == true then
		if action_id == hash("west") then
			self.facingDirection.x = -1
			self.currentAnimation = "left"
			animate(self, hash("walk-left"))
			
		elseif action_id == hash("east") then
			self.facingDirection.x = 1
			self.currentAnimation = "right"
			animate(self, hash("walk-right"))			
		elseif action_id == hash("north") then
			self.facingDirection.y = 1
			animate(self, hash("walk-"..self.currentAnimation))
		elseif action_id == hash("south") then
			self.facingDirection.y = -1
			animate(self, hash("walk-"..self.currentAnimation))
		-- Open the inventory if Q is pressed, otherwise close it
		elseif action_id == hash("inventory") then
			if not findScene("CardScreen") then
				msg.post("loader:/go#loader", "load_scene", {"CardScreen"})
			else
				msg.post("loader:/go#loader", "unload_scene", {"CardScreen"})
			end
			pprint(loadedScenes)
		end
	elseif action.released and self.canMove == true then
		if action_id == hash("west") then
			self.facingDirection.x = 0
			if vmath.length(self.facingDirection) == 0 then animate(self, hash("idle-left")) end			
		elseif action_id == hash("east") then
			self.facingDirection.x = 0
			if vmath.length(self.facingDirection) == 0 then animate(self, hash("idle-right")) end			
		elseif action_id == hash("north") or action_id == hash("south") then
			self.facingDirection.y = 0
			if vmath.length(self.facingDirection) == 0 then animate(self, hash("idle-"..self.currentAnimation)) end	
		end
	end
end
