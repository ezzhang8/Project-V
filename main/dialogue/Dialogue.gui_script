local messageTable = {}
local currentSum = 0

local selections = {}
local currentSelectionIndex = 1 

local choiceNodeTable = {}
local interactE 

function init(self) 
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("ChoicePrototype"), false)
	gui.set_enabled(gui.get_node("ChoiceText"), false)
	
	gui.set_enabled(gui.get_node("InteractE"), false)

	interactE = gui.clone(gui.get_node("InteractE"))
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_dialogue") then
		local outcome = message["outcomes"][currentSum]
		messageTable = message

		if currentSum < 0 then
			msg.post("loader:/go#loader", "set_player_property", {{"canMove", true}})
			msg.post("loader:/go#loader", "unload_scene", {"Dialogue"})
		end
		
		if outcome ~= nil then
			msg.post(msg.url(outcome[1]), hash(outcome[2]), outcome[3])
			msg.post("loader:/go#loader", "set_player_property", {{"canMove", true}})
			msg.post("loader:/go#loader", "unload_scene", {"Dialogue"})
			
			msg.post(".", "release_input_focus")
		end
		for index, dialogue in pairs(message["dialogue"]) do
			if dialogue["sum"] == currentSum then
				gui.set_text(gui.get_node("DialogueText"), dialogue["text"])

				selections = {}
				choiceNodeTable = {}
				for order, option in pairs(message["dialogue"][index]["options"]) do
					choiceNodeTable = gui.clone_tree(gui.get_node("ChoicePrototype"))
					
					gui.set_id(choiceNodeTable[hash("ChoicePrototype")], currentSum.."ChoicePrototype"..order)
					gui.set_id(choiceNodeTable[hash("ChoiceText")], currentSum.."ChoiceText"..order)
					gui.set_position(gui.get_node(currentSum.."ChoicePrototype"..order), vmath.vector3(-100, -20*order+10, 0))
					gui.set_enabled(gui.get_node(currentSum.."ChoicePrototype"..order), true)
					gui.set_enabled(gui.get_node(currentSum.."ChoiceText"..order), true)
					
					gui.set_text(gui.get_node(currentSum.."ChoiceText"..order), option[1])

					table.insert(selections, option[2])
					changeIndicator()
				end
			end
		end
	end
end

function changeIndicator()
	gui.set_enabled(interactE, true)
	gui.set_parent(interactE, gui.get_node(currentSum.."ChoicePrototype"..currentSelectionIndex))
end

function on_input(self, action_id, action)
	if action_id == hash("navigate") and action.released == true then
		if currentSelectionIndex + 1 > #selections then
			currentSelectionIndex = 1
		else 
			currentSelectionIndex = currentSelectionIndex + 1
		end

		changeIndicator()
	elseif action_id == hash("interact") and action.released == true then

		for i=1, #selections do
			if gui.get_node(currentSum.."ChoicePrototype"..i) ~= nil then
				gui.delete_node(gui.get_node(currentSum.."ChoicePrototype"..i))
			end
		end
		currentSum = currentSum + selections[currentSelectionIndex]
		currentSelectionIndex = 1
		
		msg.post("go", "show_dialogue", messageTable)
	end
end
