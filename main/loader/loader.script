local messageContainer = {}
local currentPlayerLocation = "City"

loadedScenes = {}

local function loadScene(self, sceneId)
	msg.post("go#"..sceneId, "load")
	msg.post("go#"..sceneId, "init")

	table.insert(loadedScenes, sceneId)
end

local function unloadScene(self, sceneId)
	msg.post("go#"..sceneId, "unload")

	for i,v in ipairs(loadedScenes) do
		if v == sceneId then
			table.remove(loadedScenes, i)
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")

	defos.set_fullscreen(true)
	defos.disable_window_resize()
	defos.disable_maximize_button()
	
	loadScene(self, "MainMenu")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_scene") then
		loadScene(self, message[1])
	elseif message_id == hash("unload_scene") then
		unloadScene(self, message[1])
	elseif message_id == hash("show_dialogue") then
		loadScene(self, "Dialogue")
		messageContainer = message
	elseif message_id == hash("init_card_battle") then
		loadScene(self, "CardScreen")
		messageContainer = message
	-- Part of a message chain that sends a property change to the player object
	elseif message_id == hash("set_player_property") then
		msg.post(currentPlayerLocation..":/Player/player", "set_player_property", message)
		
	-- Default Defold message: fired when a collection proxy has fully loaded
	elseif message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
		-- If the loaded scene was the Dialog menu
		if sender == msg.url("loader:/go#Dialogue") then
			msg.post(currentPlayerLocation..":/Player/player", "set_player_property", {{"canMove", false}})
			msg.post("Dialogue:/go#Dialogue", "show_dialogue", messageContainer)
		elseif sender == msg.url("loader:/go#CardScreen") then
			msg.post(currentPlayerLocation..":/Player/player", "set_player_property", {{"canMove", false}})
			msg.post("CardScreen:/go#CardScreen", "init_card_battle", messageContainer)
		end
	elseif message_id == hash("test") then
		print(message[1])
	end
end