local dialogMessage = {}
local currentPlayerLocation = "City"

loadedScenes = {}

local function loadScene(self, sceneId)
	msg.post("go#"..sceneId, "load")
	msg.post("go#"..sceneId, "init")

	table.insert(loadedScenes, sceneId)
end

local function unloadScene(self, sceneId)
	msg.post("go#"..sceneId,"unload")

	for i,v in ipairs(loadedScenes) do
		if v == sceneId then
			table.remove(loadedScenes, i)
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	loadScene(self, "MainMenu")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_game") then
		loadScene(self, "City")
		unloadScene(self, "MainMenu")
		
	elseif message_id == hash("load_scene") then
		loadScene(self, message[1])
		
	elseif message_id == hash("unload_scene") then
		unloadScene(self, message[1])
		
	elseif message_id == hash("set_dialog") then
	-- loads the Dialog menu for us
		loadScene(self, "Dialogs")
		dialogMessage = message
		
	-- Part of a message chain that sends a property change to the player object
	elseif message_id == hash("set_player_property") then
		msg.post(currentPlayerLocation..":/Player/player", "set_player_property", message)
		
	-- Default Defold message: fired when a collection proxy has fully loadeds
	elseif message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
		-- If the loaded scene was the Dialog menu
		if sender == msg.url("loader:/go#Dialogs") then
			msg.post("Dialogs:/go#DialogMenu", "set_dialog", {dialogMessage[1]})
			msg.post(currentPlayerLocation..":/Player/player", "set_player_property", {{"canMove", false}})

			pprint(loadedScenes)
		end
		
	end
end